definitions:
  controllers.CartInput:
    properties:
      ProductId:
        type: integer
      qty:
        type: integer
    type: object
  controllers.CartUpdateInput:
    properties:
      qty:
        type: integer
    type: object
  controllers.FeedbackInput:
    properties:
      feedback:
        type: string
    type: object
  controllers.InputLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.InputUser:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  controllers.ProductInput:
    properties:
      category:
        type: string
      name:
        type: string
      price:
        type: integer
    type: object
  controllers.ProductReviewInput:
    properties:
      rating:
        type: integer
      review:
        type: string
    type: object
  controllers.StoreInput:
    properties:
      address:
        type: string
      name:
        type: string
    type: object
  controllers.TransactionInput:
    properties:
      productId:
        type: integer
      qty:
        type: integer
    type: object
  model.Cart:
    properties:
      ProductId:
        type: integer
      id:
        type: integer
      qty:
        type: integer
      userid:
        type: integer
    type: object
  model.CartResponse:
    properties:
      data:
        $ref: '#/definitions/model.Cart'
      message:
        type: string
      status:
        type: integer
    type: object
  model.CartsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Cart'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  model.Feedback:
    properties:
      Date:
        type: string
      feedback:
        type: string
      id:
        type: integer
      userid:
        type: integer
    type: object
  model.FeedbackResponse:
    properties:
      data:
        $ref: '#/definitions/model.Feedback'
      message:
        type: string
      status:
        type: integer
    type: object
  model.FeedbacksResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Feedback'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.Product:
    properties:
      category:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      storeId:
        type: integer
    type: object
  model.ProductResponse:
    properties:
      data:
        $ref: '#/definitions/model.Product'
      message:
        type: string
      status:
        type: integer
    type: object
  model.ProductReview:
    properties:
      Date:
        type: string
      id:
        type: integer
      productid:
        type: integer
      rating:
        type: integer
      review:
        type: string
      userid:
        type: integer
    type: object
  model.ProductReviewResponse:
    properties:
      data:
        $ref: '#/definitions/model.ProductReview'
      message:
        type: string
      status:
        type: integer
    type: object
  model.ProductReviewsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ProductReview'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.ProductsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.Store:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      userId:
        type: integer
    type: object
  model.StoreResponse:
    properties:
      data:
        $ref: '#/definitions/model.Store'
      message:
        type: string
      status:
        type: integer
    type: object
  model.StoresResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Store'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.Transaction:
    properties:
      date:
        type: string
      id:
        type: integer
      productId:
        type: integer
      qty:
        type: integer
      userId:
        type: integer
    type: object
  model.TransactionResponse:
    properties:
      data:
        $ref: '#/definitions/model.Transaction'
      message:
        type: string
      status:
        type: integer
    type: object
  model.TransactionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Transaction'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.User:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      usertype:
        type: integer
    type: object
  model.UserResponse:
    properties:
      data:
        $ref: '#/definitions/model.User'
      message:
        type: string
      status:
        type: integer
    type: object
  model.UsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /cart:
    get:
      description: display all cart items of users who are currently logged in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartsResponse'
      summary: Get all cart items.
      tags:
      - Cart
    post:
      description: insert product to cart belongs to the user who is currently logged
        in.
      parameters:
      - description: cart's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CartInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CartResponse'
      summary: insert cart.
      tags:
      - Cart
  /cart/{cartId}:
    delete:
      description: delete display all cart items of users who are currently logged
        in.
      parameters:
      - description: cartId
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete cart item.
      tags:
      - Cart
    put:
      description: update cart belongs to the user who is currently logged in.
      parameters:
      - description: cartId
        in: path
        name: cartId
        required: true
        type: string
      - description: cart's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.CartUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: update cart.
      tags:
      - Cart
  /feedbacks:
    get:
      description: get a list of feedback from logged in users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FeedbacksResponse'
      summary: Get user feedback.
      tags:
      - Feedbacks
    post:
      description: added feedback about the app so admin can see it.
      parameters:
      - description: feedback's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.FeedbackInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FeedbackResponse'
      summary: insert feedback.
      tags:
      - Feedbacks
  /feedbacks/all:
    get:
      description: get a list of feedback from all users, only admin can use it.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.FeedbacksResponse'
      summary: Get all user feedback.
      tags:
      - Feedbacks
  /login:
    post:
      description: login for registered users.
      parameters:
      - description: User's login data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.InputLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: login user.
      tags:
      - Users
  /logout:
    get:
      description: logout user.
      produces:
      - application/json
      responses: {}
      summary: logout user.
      tags:
      - Users
  /product:
    post:
      description: insert products sold by logged in users.
      parameters:
      - description: product's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
      summary: insert product.
      tags:
      - Products
  /product/{productid}:
    delete:
      description: delete products sold by logged in users.
      parameters:
      - description: productid
        in: path
        name: productid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete prodduct.
      tags:
      - Products
    put:
      description: product updates sold by logged in users.
      parameters:
      - description: productid
        in: path
        name: productid
        required: true
        type: string
      - description: product's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductResponse'
      summary: update product's data.
      tags:
      - Products
  /products:
    get:
      description: display all products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductsResponse'
      summary: Get all product.
      tags:
      - Products
  /register:
    post:
      description: insert user and it use for register user.
      parameters:
      - description: User's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.InputUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: insert user.
      tags:
      - Users
  /review/{productid}:
    delete:
      description: delete the review that has been given.
      parameters:
      - description: productid
        in: path
        name: productid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete prodduct review.
      tags:
      - Reviews
    post:
      description: leave a review on the product that has been purchased.
      parameters:
      - description: productid
        in: path
        name: productid
        required: true
        type: string
      - description: review's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ProductReviewInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductReviewResponse'
      summary: delete prodduct review.
      tags:
      - Reviews
    put:
      description: update a review on the product that has been purchased.
      parameters:
      - description: productid
        in: path
        name: productid
        required: true
        type: string
      - description: transaction's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.ProductReviewInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductReviewResponse'
      summary: update product's review.
      tags:
      - Reviews
  /reviews:
    get:
      description: displays customer reviews given to things that have been purchased.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductReviewsResponse'
      summary: Get all product reviews.
      tags:
      - Reviews
  /store:
    delete:
      description: delete the store belonging to the user who is currently logged
        in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete store.
      tags:
      - Stores
    post:
      description: added the store of the currently logged in user.
      parameters:
      - description: store's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.StoreInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoreResponse'
      summary: insert store.
      tags:
      - Stores
    put:
      description: update the store of the currently logged in user.
      parameters:
      - description: store's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.StoreInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoreResponse'
      summary: update store.
      tags:
      - Stores
  /stores:
    get:
      description: Display all stores.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoresResponse'
      summary: Get all stores.
      tags:
      - Stores
  /transaction:
    post:
      description: insert user's transaction who currently logged in.
      parameters:
      - description: transaction's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.TransactionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionResponse'
      summary: insert transaction.
      tags:
      - Transactions
  /transactions:
    get:
      description: display all transactions of users who are currently logged in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionsResponse'
      summary: Get all transactions.
      tags:
      - Transactions
  /user:
    put:
      description: change the data of the user who is currently logged in, include
        update password.
      parameters:
      - description: User's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.InputUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: update profile.
      tags:
      - Users
  /user/{id}:
    delete:
      description: Delete user by id and admin only can use it.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete user.
      tags:
      - Users
  /users:
    get:
      description: Display all registered users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersResponse'
      summary: Get all users.
      tags:
      - Users
swagger: "2.0"
