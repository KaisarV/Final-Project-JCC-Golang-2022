definitions:
  controllers.userInput:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  controllers.userLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  model.Store:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      userId:
        type: integer
    type: object
  model.StoreResponse:
    properties:
      data:
        $ref: '#/definitions/model.Store'
      message:
        type: string
      status:
        type: integer
    type: object
  model.StoresResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Store'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.Transaction:
    properties:
      ProductId:
        type: integer
      date:
        type: string
      id:
        type: integer
      qty:
        type: integer
      userId:
        type: integer
    type: object
  model.TransactionResponse:
    properties:
      data:
        $ref: '#/definitions/model.Transaction'
      message:
        type: string
      status:
        type: integer
    type: object
  model.TransactionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Transaction'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
  model.User:
    properties:
      address:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      usertype:
        type: integer
    type: object
  model.UserResponse:
    properties:
      data:
        $ref: '#/definitions/model.User'
      message:
        type: string
      status:
        type: integer
    type: object
  model.UsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /login:
    post:
      description: login for registered users.
      parameters:
      - description: User's login data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.userLogin'
      produces:
      - application/json
      responses: {}
      summary: login user.
      tags:
      - Users
  /register:
    post:
      description: insert user and it use for register user.
      parameters:
      - description: User's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.userInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: insert user.
      tags:
      - Users
  /store:
    delete:
      description: delete the store belonging to the user who is currently logged
        in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete store.
      tags:
      - Stores
    post:
      description: added the store of the currently logged in user.
      parameters:
      - description: store's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.userInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoreResponse'
      summary: insert store.
      tags:
      - Stores
    put:
      description: update the store of the currently logged in user.
      parameters:
      - description: store's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.Store'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoreResponse'
      summary: update store.
      tags:
      - Stores
  /stores:
    get:
      description: Display all stores.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StoresResponse'
      summary: Get all stores.
      tags:
      - Stores
  /transactions:
    get:
      description: display all transactions of users who are currently logged in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionsResponse'
      summary: Get all transactions.
      tags:
      - Transactions
    post:
      description: insert user's transaction who currently logged in.
      parameters:
      - description: transaction's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/model.Transaction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TransactionResponse'
      summary: insert transaction.
      tags:
      - Transactions
  /users:
    delete:
      description: Delete user by id and admin only can use it.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: delete user.
      tags:
      - Users
    get:
      description: Display all registered users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsersResponse'
      summary: Get all users.
      tags:
      - Users
    put:
      description: change the data of the user who is currently logged in.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: User's data
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/controllers.userInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
      summary: update user.
      tags:
      - Users
swagger: "2.0"
